<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Aardwolf_Inventory_Serials"
   author="Fiendish"
   id="0cbb10309587f0ee15ba78ce"
   language="Lua"
   purpose="Adds useful serial numbers to inventory command output"
   date_written="2011-12-30 22:45:00"
   requires="4.70"
   version="1.0"
   save_state="y"
   >
<description trim="y">
Makes inventory command slightly more useful by displaying item serial numbers
</description>
</plugin>

<!--  Triggers  -->

<triggers>

<trigger
   enabled="n"
   match="{invdata}"
   name="start_inv"
   omit_from_output="y"
   sequence="100"
   send_to="14"
>
<send>
   EnableTrigger("invdata", true)
   EnableTrigger("end_inv", true)
</send>
</trigger>

<trigger
   enabled="n"
   match="{/invdata}"
   name="end_inv"
   omit_from_output="y"
   sequence="100"
   send_to="14"
>
<send>
   displayInventory()
   EnableTrigger("invdata", false)
   EnableTrigger("end_inv", false)
   if inv_sent_count == 0 then
      EnableTrigger("start_inv", false)
   end
   if key_sent_count == 0 then
      EnableTrigger("start_key", false)
   end
</send>
</trigger>

<trigger
   enabled="n"
   match="^(\d+),(\w*),(.+),(\d+),(\d+),([01]),(-?\d+),(-?\d+)"
   name="invdata"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   send_to="14"
   script="parseInvdata"
>
</trigger>

<trigger
   enabled="n"
   match="{keyring}"
   name="start_key"
   omit_from_output="y"
   sequence="100"
   send_to="14"
>
<send>
   EnableTrigger("keyring", true)
   EnableTrigger("end_key", true)
</send>
</trigger>

<trigger
   enabled="n"
   match="{/keyring}"
   name="end_key"
   omit_from_output="y"
   sequence="100"
   send_to="14"
>
<send>
   if GetTriggerOption("start_inv", "enabled") == 0 then
      displayKeyring()
   end
   EnableTrigger("keyring", false)
   EnableTrigger("end_key", false)
   if key_sent_count == 0 then
      EnableTrigger("start_key", false)
   end
</send>
</trigger>

<trigger
   enabled="n"
   match="^\s*(\d+),(\w*),(.+),(\d+),(\d+),([01]),(-?\d+),(-?\d+)"
   name="keyring"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   send_to="14"
   script="parseKeyring"
>
</trigger>

<trigger
   enabled="n"
   match="{vault}"
   name="start_vault"
   omit_from_output="y"
   sequence="100"
   send_to="14"
>
<send>
   EnableTrigger("vault", true)
   EnableTrigger("end_vault1", true)
   EnableTrigger("end_vault2", true)
</send>
</trigger>

<trigger
   enabled="y"
   match="You must be in a bank room to access your vault."
   name="no_vault"
   omit_from_output="n"
   sequence="100"
   send_to="12"
>
<send>
   vault_sent_count = vault_sent_count - 1
   if vault_sent_count == 0 then
      EnableTrigger("start_vault", false)
   end
</send>
</trigger>

<trigger
   enabled="n"
   match="{/vault}"
   name="end_vault1"
   omit_from_output="y"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   regexp="y"
   match="^{vaultcounts}(\d+),(\d+),(\d+){/vaultcounts}$"
   name="end_vault2"
   omit_from_output="y"
   sequence="100"
   send_to="14"
>
<send>
   displayVault("%1", "%2", "%3")
   EnableTrigger("vault", false)
   EnableTrigger("end_vault1", false)
   EnableTrigger("end_vault2", false)
   if vault_sent_count == 0 then
      EnableTrigger("start_vault", false)
   end
</send>
</trigger>

<trigger
   enabled="n"
   match="^\s*(\d+),(\w*),(.+),(\d+),(\d+),([01]),(-?\d+),(-?\d+)"
   name="vault"
   omit_from_output="y"
   regexp="y"
   sequence="100"
   send_to="14"
   script="parseVault"
>
</trigger>
</triggers>

<aliases>

<alias
   match="^(i|in|inv|inve|inven|invent|invento|inventor|inventory) *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   group="commands"
>
<send>
   inv_sent_count = inv_sent_count + 1
   key_sent_count = key_sent_count + 1
   EnableTrigger("start_key", true)
   EnableTrigger("start_inv", true)
   SendNoEcho("keyring data")
   SendNoEcho("invdata")
   if manually_requested then
      EnableAliasGroup("commands", false)
   end
</send>
</alias>

<alias
   match="^keyr(i|in|ing)? l(i|is|ist)? *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   group="commands"
>
<send>
   key_sent_count = key_sent_count + 1
   EnableTrigger("start_key", true)
   SendNoEcho("keyring data")
   if manually_requested then
      EnableAliasGroup("commands", false)
   end
</send>
</alias>

<alias
   match="^vau(l|lt)? l(i|is|ist)? *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   group="commands"
>
<send>
   vault_sent_count = vault_sent_count + 1
   EnableTrigger("start_vault", true)
   SendNoEcho("vault data")
   if manually_requested then
      EnableAliasGroup("commands", false)
   end
</send>
</alias>

<alias
   match="^((i|in|inv|inve|inven|invent|invento|inventor|inventory)|(keyr(i|in|ing)? l(i|is|ist)?)|(vau(l|lt)? l(i|is|ist)?)) serials( help| off| on)?$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   send_to="12"
   script="serials_command"
></alias>
</aliases>
<script>
<![CDATA[

visible_always = tonumber(GetVariable("visible_always")) ~= 0  -- default true
manually_requested = false

function OnPluginListChanged()
   dofile "lua/aard_requirements.lua"
end

function OnPluginInstall()
   if IsConnected() then
      OnPluginConnect()
   end
   EnableAliasGroup("commands", visible_always)
end

function show_help()
   Note("--------------------------------------")
   Note("Aardwolf Inventory Serials Plugin Help")
   Note("--------------------------------------")
   Note("")
   Note("Command syntax:")
   ColourNote("yellow", "", ">", "", "","  inventory serials <on/off>")
   Note("      - Show or don't show item serial numbers by default when viewing inventory")
   ColourNote("yellow", "", ">", "", "","  (inventory|keyring list|vault list) serials")
   Note("      - Request the display of item serial numbers once")

   Note("")
   Note("Current status:")
   Tell("Item serial numbers always shown by default? ")
   ColourNote(visible_always and "lime" or "red", "", visible_always and "[YES]" or "[NO]")
   Note("")
end

function serials_command(name, line, wildcards)
   -- 1 is full command minus the serials bit
   -- 2 is inv
   -- 3 is keyring
   -- 6 is vault
   -- 9 is help/off/on
   cmd = Trim(wildcards[9])
   if cmd == "" then
      if visible_always then
         ColourNote("", "", "You already display item serial numbers by default. For help, type ","yellow", "", "'inventory serials help'","","",".")
      else
         manually_requested = true
      end
      EnableAliasGroup("commands", true)
      Execute(wildcards[1])
      manually_requested = false
   elseif cmd == "off" and wildcards[2] ~= "" then
      ColourNote("","","Inventory, vault list, and keyring list ","red","","[will not]","",""," display item serial numbers unless specifically requested (For help, type 'inventory serials help').")
      visible_always = false
      SetVariable("visible_always", 0)
      EnableAliasGroup("commands", false)
   elseif cmd == "on" and wildcards[2] ~= "" then
      ColourNote("","","Inventory, vault list, and keyring list ","lime","","[will]","",""," always display item serial numbers.")
      visible_always = true
      SetVariable("visible_always", 1)
      EnableAliasGroup("commands", true)
   elseif cmd == "help" then
      show_help()
   end
end

function OnPluginEnable()
   OnPluginInstall()
end

function OnPluginConnect()
   inv_sent_count = 0
   key_sent_count = 0
   vault_sent_count = 0
end

dofile (GetPluginInfo (GetPluginID(), 20) .. "aardwolf_colors.lua")
inv = {}
invsorted = {}
keys = {}
keysorted = {}
vault = {}
vaultsorted = {}

function parse(styles, wildcards, results, sorted)
   -- Work around ansi mismatch between invdata and keyring data.
   -- If we got an ansi line, convert the many styles it generates to color codes.
   if #styles > 1 then
      table.remove(styles)
      table.remove(styles, 1)
      wildcards[3] = StylesToColoursOneLine(styles)
   end

   local hash = wildcards[2]..wildcards[3]..wildcards[4] -- flags, name, level
   if not results[hash] then
      results[hash] = {{},{}}
      for i,v in ipairs({{"K","@R(K)@w"},{"M","@B(M)@w"},{"G","@W(G)@w"},{"H","@C(H)@w"},{"I","@w(I)"},{"T","@R(T)@w"}}) do
         if wildcards[2]:find(v[1]) then
            table.insert(results[hash][2],v[2]) -- flags
         end
      end
      results[hash][3] = wildcards[3] -- name
      results[hash][4] = wildcards[4] -- level
      table.insert(sorted, results[hash])
   end
   table.insert(results[hash][1], wildcards[1]) -- id
end

function parseInvdata(name, line, wildcards, styles)
   parse(styles, wildcards, inv, invsorted)
end

function parseKeyring(name, line, wildcards, styles)
   parse(styles, wildcards, keys, keysorted)
end

function parseVault(name, line, wildcards, styles)
   parse(styles, wildcards, vault, vaultsorted)
end

function displaySorted(which)
   local num_items = 0
   for k,v in ipairs(which) do
      local num = #v[1]
      num_items = num_items + num
      local count = string.format("@W(%2d) @w",num)
      local line = string.format("%-5s",num > 1 and count or "     ")..table.concat(v[2]).." "..v[3].."@w  ["..((#v[1] < 4 and table.concat(v[1],",")) or "many").."]  ".."@W(@G"..v[4].."@W)@w\r\n"
      Simulate(ColoursToANSI(line))
   end
   return num_items
end

function displayVault(num_items, num_including_kept, capacity)
   Simulate(ColoursToANSI("@wYour vault holds:\r\n"))
   local num_vaulted = displaySorted(vaultsorted)
   Simulate(ColoursToANSI(string.format("@wYou are using @Y%d@w of @Y%d@w item slots in your vault.@w\r\n", num_items, capacity)))
   vault = {}
   vaultsorted = {}
   vault_sent_count = vault_sent_count - 1
end

function displayKeyring()
   Simulate(ColoursToANSI("@wYour keyring holds:\r\n"))
   local num_keys = displaySorted(keysorted)
   Simulate(ColoursToANSI(string.format("@wYou have @Y%d@w items on your keyring (%d unique).@w\r\n", num_keys, #keysorted)))
   keys = {}
   keysorted = {}
   key_sent_count = key_sent_count - 1
end

function displayInventory()
   Simulate(ColoursToANSI("@wYou are carrying:\r\n"))
   displaySorted(invsorted)
   if #keysorted > 0 then
      local num_keys = 0
      for k,v in ipairs(keysorted) do
         num_keys = num_keys + #v[1]
      end
      Simulate(ColoursToANSI(string.format("@C(%2d) @W** Items on Keyring (%d unique) **@w\r\n", num_keys, #keysorted)))
   end
   invsorted = {}
   inv = {}
   keys = {}
   keysorted = {}
   inv_sent_count = inv_sent_count - 1
   key_sent_count = key_sent_count - 1
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>
</script>
</muclient>
