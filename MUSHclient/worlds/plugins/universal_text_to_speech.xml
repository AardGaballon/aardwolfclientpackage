<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Universal_Text_To_Speech"
   author="Fiendish"
   id="463242566069ebfd1b379ec1"
   language="Lua"
   purpose="Automatically speak output text"
   date_written="2017-01-01 19:53:01"
   requires="4.60"
   version="1.0"
   >
<description>
Text to speech support using the Tolk speech and braille abstraction library.
https://github.com/dkager/tolk
</description>
</plugin>

<aliases>
  <alias
   match="tts_stop"
   enabled="y"
   send_to="12"
   sequence="100"
   ignore_case="y"
  >
  <send>silence()</send>
  </alias>

  <alias
   match="tts_note *"
   enabled="y"
   send_to="12"
   sequence="100"
   ignore_case="y"
  >
  <send>say("%1", false)</send>
  </alias>

  <alias
   match="tts_interrupt *"
   enabled="y"
   send_to="12"
   sequence="100"
   ignore_case="y"
  >
  <send>say("%1", true)</send>
  </alias>

  <alias
   script="tts_toggle"
   match="tts"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   ignore_case="y"
  >
  </alias>

  <alias
   script="tts_focus_toggle"
   match="ftts"
   enabled="y"
   omit_from_command_history="y"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
  >
  </alias>

  <alias
   match="sapi faster"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      SetVariable("engine_Rate", tostring(sapi.faster()))
   end
   </send>
  </alias>

  <alias
   match="sapi slower"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      SetVariable("engine_Rate", tostring(sapi.slower()))
   end
   </send>
  </alias>

  <alias
   match="sapi voice*"
   regexp="n"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      local arg = Trim("%1")
      if arg == "" then
         sapi.say_current_voice()
      else
         local index,id = sapi.set_voice_by_number(arg)
         SetVariable("engine_Voice_ID", tostring(id))
      end
   end
   </send>
  </alias>

  <alias
   match="sapi list voices"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      sapi.list_voices()
   end
   </send>
  </alias>

  <alias
   match="sapi test"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      sapi.speech_demo()
   end
   </send>
  </alias>

  <alias
   match="sapi rate*"
   enabled="n"
   regexp="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      local arg = Trim("%1")
      if arg == "" then
         sapi.say_current_rate()
      else
         SetVariable("engine_Rate", tostring(sapi.set_rate(arg)))
      end
   end
   </send>
  </alias>

  <alias
   match="sapi help"
   regexp="n"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      sapi.say("This help is being spoken but not printed to the screen. To print it to the screen, use: sapi help printed.")
      sapi.say(sapi_help(), true)
   end
   </send>
  </alias>

  <alias
   match="sapi help printed"
   regexp="n"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="99"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   print(sapi_help())
   </send>
  </alias>

  <alias
   match="sapi filtering*"
   regexp="n"
   enabled="n"
   omit_from_log="y"
   omit_from_output="y"
   sequence="100"
   group="sapi"
   send_to="12"
   ignore_case="y"
  ><send>
   if sapi then
      local arg = Trim("%1")
      if arg == "" then
         sapi.say_current_filtering_level()
      else
         SetVariable("filtering_level", tostring(sapi.set_filtering_level(arg)))
      end
   end
   </send>
  </alias>
</aliases>

<script>
<![CDATA[
AcceleratorTo("Ctrl+Space", "CallPlugin('"..GetPluginID().."', 'silence')", sendto.script)
AcceleratorTo("Ctrl+1", "CallPlugin('"..GetPluginID().."', 'playback', 1)", sendto.script)
AcceleratorTo("Ctrl+2", "CallPlugin('"..GetPluginID().."', 'playback', 2)", sendto.script)
AcceleratorTo("Ctrl+3", "CallPlugin('"..GetPluginID().."', 'playback', 3)", sendto.script)
AcceleratorTo("Ctrl+4", "CallPlugin('"..GetPluginID().."', 'playback', 4)", sendto.script)
AcceleratorTo("Ctrl+5", "CallPlugin('"..GetPluginID().."', 'playback', 5)", sendto.script)
AcceleratorTo("Ctrl+6", "CallPlugin('"..GetPluginID().."', 'playback', 6)", sendto.script)
AcceleratorTo("Ctrl+7", "CallPlugin('"..GetPluginID().."', 'playback', 7)", sendto.script)
AcceleratorTo("Ctrl+8", "CallPlugin('"..GetPluginID().."', 'playback', 8)", sendto.script)
AcceleratorTo("Ctrl+9", "CallPlugin('"..GetPluginID().."', 'playback', 9)", sendto.script)
AcceleratorTo("Ctrl+0", "CallPlugin('"..GetPluginID().."', 'playback', 10)", sendto.script)

-- convert wchar_t[] to lua str
function widestr_to_luastr(wstr)
   local size_needed = ffi.C.WideCharToMultiByte(CP_UTF8, 0, wstr, -1, nil, 0, nil, false)
   local str = ffi.new("char[?]", size_needed)
   ffi.C.WideCharToMultiByte(CP_UTF8, 0, wstr, -1, str, size_needed, nil, false)
   return ffi.string(str)
end

-- convert lua str to wchar_t[]
function luastr_to_widestr(str)
   local size_needed = ffi.C.MultiByteToWideChar(CP_UTF8, 0, str, -1, nil, 0)
   local wstr = ffi.new("wchar_t[?]", size_needed)
   ffi.C.MultiByteToWideChar(CP_UTF8, 0, str, #str, wstr, size_needed)
   return wstr
end

function say(text, interrupt)
   if (not text) or text:find("^%s*$") then
      return
   end

   if interrupt then
      silence()
   end

   -- print(text) -- debug
   if sapi then
      sapi.say(text)
   elseif tolk and tolk.Tolk_IsLoaded() then
   	tolk.Tolk_Output(luastr_to_widestr(text), interrupt or false)
	end
end

function silence()
   if sapi then
      sapi.skip_all()
   elseif tolk and tolk.Tolk_IsLoaded() then
      tolk.Tolk_Silence()
   end
end

function OnPluginInstall()
   sapi = false
   EnableGroup("sapi", false)

   -- LuaJIT FFI
   ffi = require "ffi"

   ffi.cdef[[
      int MultiByteToWideChar(unsigned int CodePage, unsigned int dwFlags, const char* lpMultiByteStr, int cbMultiByte, wchar_t* lpWideCharStr, int cchWideChar);
      int WideCharToMultiByte(unsigned int CodePage, unsigned int dwFlags, const wchar_t* lpWideCharStr, int cchWideChar, const char* lpMultiByteStr, int cbMultiByte, const char * lpDefaultChar, bool lpUsedDefaultChar);
      void __cdecl Tolk_TrySAPI(bool);
      void __cdecl Tolk_Load();
      bool __cdecl Tolk_IsLoaded();
      void __cdecl Tolk_Unload();
      void __cdecl Tolk_PreferSAPI(bool);
      const wchar_t * __cdecl Tolk_DetectScreenReader();
      bool __cdecl Tolk_HasSpeech();
      bool __cdecl Tolk_HasBraille();
      bool __cdecl Tolk_Output(const wchar_t *str, bool interrupt);
      bool __cdecl Tolk_Speak(const wchar_t *str, bool interrupt);
      bool __cdecl Tolk_Braille(const wchar_t *str);
      bool __cdecl Tolk_IsSpeaking();
      bool __cdecl Tolk_Silence();
   ]]

   -- https://github.com/dkager/tolk
   if ffi.abi("32bit") then
      tolk_path = 'screen_reader_dlls/x86/Tolk.dll'
   else
      tolk_path = 'screen_reader_dlls/x64/Tolk.dll'
   end
   tolk = ffi.load(tolk_path)

   CP_UTF8 = 65001

   if tolk then
      tolk.Tolk_TrySAPI(false)
      tolk.Tolk_Load()
      tts_enabled = tolk.Tolk_IsLoaded() and tolk.Tolk_HasSpeech()
   end

   if tts_enabled then
      local reader = widestr_to_luastr(tolk.Tolk_DetectScreenReader())
      say("The universal T T S plug-in is using "..reader.." speech.", true)
   else
      sapi_fallback()
   end
end

function unload()
   silence()
   tolk = nil
   sapi = nil
   collectgarbage("collect")
end

history = {}
function playback(line)
   if line then
      say(history[line])
   end
end

function OnPluginScreendraw(line_type, log, line)
	if tts_enabled and line_type < 2 then
		say(line)
      if Trim(line) ~= "" then
         table.insert(history, 1, line)
         history[11] = nil
      end
	end
end

function tts_focus_toggle()
   if GetVariable("ftts") ~= "1" then
      Note("TTS will now be disabled when switching windows.")
      SetVariable("ftts", 1)
   else
      Note("TTS will now stay active when switching windows.")
      SetVariable("ftts", 0)
   end
end

function OnPluginLoseFocus()
   if GetVariable("ftts") == "1" then
      tts_enabled = false
   end
end

function OnPluginGetFocus()
   if GetVariable("ftts") == "1" and (tolk or sapi) then
      tts_enabled = true
   end
end

function tts_toggle(name, line, wildcards)
	tts_enabled = not tts_enabled
   if not tts_enabled then
   	silence()
	end
	say(string.format("Speech %s.", tts_enabled and "on" or "off"), true)
end

function OnPluginTabComplete(word)
	if tts_enabled then
		say(word, true)
	end
end

function OnPluginClose()
   unload()
end

function sapi_fallback()
   sapi = require "sapi_interface"

   if sapi == -1 then
      print([[
      Could not open SAPI.
      Note for Linux and Mac OS users...
      SAPI speech functionality depends on the Microsoft Speech API.
      This is not included by default in Wine, and SpeechSDK51.exe must be separately installed.
      You can download it from http://download.microsoft.com/download/B/4/3/B4314928-7B71-4336-9DE7-6FA4CF00B7B3/SpeechSDK51.exe
      ]])
      sapi = nil
      return
   end

   if sapi == -2 then
      print("No SAPI voices found.")
      sapi = nil
      return
   end

   local new_filter = tonumber(GetVariable("filtering_level"))
   if new_filter then
      sapi.set_filtering_level(new_filter, true)
   end

   local new_rate = tonumber(GetVariable("engine_Rate"))
   if new_rate then
      sapi.set_rate(new_rate, true)
   end

   local new_voice = GetVariable("engine_Voice_ID")
   if new_voice then
      sapi.set_voice_by_id(new_voice, true)
   end

   -- -- Add a few basic SAPI customizations
   -- for i,v in ipairs({
   --    {"%f[%a][pP]file", " P file"},
   --    {"%f[%a][gG]clan", " G clan"},
   --    {"%f[%a][gG]tell", " G tell"},
   --    {"%f[%a][fF]talk", " F talk"},
   --    {"%f[%a][gG]clan", " G clan"},
   --    {"%f[%a][gG]social", " G social"},
   --    {"%f[%a][rR]auction", " R auction"},
   --    {"%f[%a][gG]ametalk", " game-talk"},
   --    {"%f[%a][nN]obletalk", " noble-talk"},
   --    {"%f[%a][tT]iertalk", " tier-talk"},
   --    {"%f[%a][rR]acetalk", " race-talk"},
   --    {"%f[%a][cC]lantalk", " clan-talk"},
   --    {"%f[%a][pP]okerinfo", " poker-info"},
   --    {"%f[%a][mM]afiainfo", " mafia-info"},
   --    {"%f[%a][aA]ylor", " aylor "} -- Aylorian->ALIEN??? hahahaha what
   -- }) do
   --    table.insert(sapi.replacements, v)
   -- end

   tts_enabled = true
   EnableGroup("sapi", true)
   sapi.say("You are using Microsoft SAPI for text to speech. If you were hoping to send your text through a screen reader engine such as JAWS, N V D A, or Windows Eyes, and it didn't work, try restarting MUSHclient.")
   sapi.say("Type \"sapi help\" for a list of SAPI configuration commands.")
   sapi.speech_demo()
end

function sapi_help()
   return [[
   SAPI Settings Commands:

   sapi faster             : Speeds speech up.
   sapi slower             : Slows speech down.
   sapi rate [number]      : Check or set speech rate to [number].
   sapi list voices        : List the available TTS voices.
   sapi voice [number]     : Check or set to the given TTS voice number.
   sapi filtering [number] : Check or set punctuation filtering level to [number].

   You may also be able to control SAPI settings through one of your system control panels.
   ]]
end

]]>
 </script>
</muclient>
