<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Thanks to Orogan for help. I don't remember what with. ^o^ -->
<muclient>
<plugin
   name="Aardwolf_Chat_Capture_Miniwindow"
   author="Fiendish"
   id="b555825a4a5700c35fa80780"
   language="Lua"
   purpose="Move chats to a miniwindow"
   date_written="2010-10-25"
   requires="4.73"
   version="2.0"
   save_state="y"
   sequence="-9000"
>
<!-- sequence must be before echo plugin to capture unechoed info -->

<description trim="y">

USAGE:

   chats show       : show chats window
   chats hide       : hide chats window

   Drag title bar to move window.
   Drag inside text area to select.
   Right-click to see menu of options

</description>

</plugin>

<triggers>
<trigger
   enabled="n"
   name="remort_auction"
   match="^Remort Auction:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="global_quest"
   match="^Global Quest:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="info"
   match="^INFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="raidinfo"
   match="^RAIDINFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="claninfo"
   match="^CLANINFO:.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="n"
   name="warfare"
   match="^(WARFARE|GENOCIDE):.+$"
   regexp="y"
   script="untagged_info"
   sequence="100"
></trigger>

<trigger
   enabled="y"
   match="^\*.+$"
   regexp="y"
   omit_from_output="n"
   script="rsocial"
   sequence="100"
></trigger>

</triggers>

<aliases>

<alias
   match="resetaard"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="reset_aard"
></alias>

<alias
   script="chat_show"
   match="chats show"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

<alias
   script="chat_hide"
   match="chats hide"
   enabled="y"
   sequence="100"
   ignore_case="y"
></alias>

</aliases>

<script>
<![CDATA[

require "movewindow"
require "gmcphelper"
require "text_rect"
require "scrollbar"
dofile(GetPluginInfo(GetPluginID(), 20) .. "aardwolf_colors.lua")


SCROLL_BAR_WIDTH = 15
MAX_LINES = 10000 -- how many lines to store in scrollback

-- date_format = "[%d %b %H:%M:%S] "   -- [30 Aug 13:29:49]   date and time 24 hour
-- date_format = "[%d %b %I:%M:%S%p] " -- [30 Aug 01:20:12PM] date and time 12 hour
-- date_format = "[%H:%M:%S] "         -- [13:29:08]          time 24 hour
-- date_format = "[%X] "               -- [1:22:06 PM]        time 12 hour

default_width = 657
default_height = 131
default_x = 0
default_y = 0
default_font_name = "Dina"
default_font_size = "8"

head_font_name = default_font_name
head_font_size = default_font_size

show_donations = tonumber(GetVariable("show_donations")) or 1
info_on = tonumber(GetVariable("info_on")) or 0
global_quest_on = tonumber(GetVariable("global_quest_on")) or 0
remort_auction_on = tonumber(GetVariable("remort_auction_on")) or 0
warfare_on = tonumber(GetVariable("warfare_on")) or 0

SetTriggerOption("warfare", "enabled", warfare_on)
SetTriggerOption("info", "enabled", info_on)
SetTriggerOption("raidinfo", "enabled", info_on)
SetTriggerOption("claninfo", "enabled", info_on)
SetTriggerOption("global_quest", "enabled", global_quest_on)
SetTriggerOption("remort_auction", "enabled", remort_auction_on)

date_format = GetVariable("date_format") or "[%d %b %H:%M:%S] "
width = tonumber(GetVariable("WINDOW_WIDTH")) or default_width
height = tonumber(GetVariable("WINDOW_HEIGHT")) or default_height
log_to_file = tonumber(GetVariable("log_to_file")) or 0
log_colour_codes = tonumber(GetVariable("log_colour_codes")) or 1
log_timestamps = tonumber(GetVariable("log_timestamps")) or 1

-- colours
TAB_BACKGROUND_COLOUR = 0x696969
WINDOW_BACKGROUND_COLOUR = GetNormalColour(1)
WINDOW_TEXT_COLOUR = 0xffffff
SCROLL_BACKGROUND_COLOUR = 0xE8E8E8
SCROLL_BAR_COLOUR = 0x111111
SCROLL_DETAIL_COLOUR = 0x000000
WINDOW_BORDER_COLOUR = 0xE8E8E8

local init_channel_names = {"answer","auction","barter","cant","chant","claninfo","clantalk","commune","curse","dtell","ftalk","gametalk","gclan","gossip","grapevine","gratz","gtell","helper","immtalk","inform","lasertag","ltalk","mafiainfo","market","mobsay","music","newbie","pchat","pokerinfo","ptell","question","racetalk","rauction","rp","say","spouse","tech","telepathy","tell","tiertalk","trivia","wangrp","wardrums","yell"}
channels_table = {}
loadstring(GetVariable("channels_table") or "")()

tabs_activity = {}

tabs_captures = {{}}
loadstring(GetVariable("tabs_captures") or "")()
num_tabs = #tabs_captures
current_tab = math.min(tonumber(GetVariable("current_tab")) or 1, #tabs_captures)

function addNewChannel(chan)
   channels_table[chan] = channels_table[chan] or {["capture"]=true}
   for tab,channels in ipairs(tabs_captures) do
      channels[chan] = channels[chan] or {["capture"]=true}
   end
end

function addDefaultChannels()
   for i,v in ipairs(init_channel_names) do
      addNewChannel(v)
   end
end
addDefaultChannels()

function makeRect(i, tr_left, tr_top, tr_width, tr_height)
   tabs_rects[i] = TextRect.new(win, "tr"..tostring(i), tr_left, tr_top, tr_width, tr_height, 1000, true, ColourNameToRGB("black"), 3, "Dina", 10)
   tabs_scrollbars[i] = ScrollBar.new(win, "sb"..tostring(i), tr_left + tr_width, tr_top, SCROLL_BAR_WIDTH, height-tr_top-SCROLL_BAR_WIDTH)

   tabs_rects[i]:addUpdateCallback(tabs_scrollbars[i], tabs_scrollbars[i].setScroll)
   tabs_scrollbars[i]:addUpdateCallback(tabs_rects[i], tabs_rects[i].setScroll)

   tabs_rects[i]:setExternalMenuFunction(extend_rightclick_menu_string, extend_rightclick_menu_result)
   tabs_rects[i]:loadFont(font_name, font_size)
end

function setTab(i)
   if tabs_rects[current_tab] then
      tabs_rects[current_tab]:unInit()
      tabs_scrollbars[current_tab]:unInit()
   end
   current_tab = math.min(math.max(i, 1), num_tabs)
   tabs_activity[current_tab] = false

   setupDisplay()
end

function addTab()
   num_tabs = num_tabs + 1
   tabs_captures[num_tabs] = {}
   addDefaultChannels()

   setTab(num_tabs)
end

function removeTab()
   tabs_rects[current_tab]:unInit()
   tabs_scrollbars[current_tab]:unInit()

   table.remove(tabs_rects, current_tab)
   table.remove(tabs_scrollbars, current_tab)
   table.remove(tabs_captures, current_tab)

   WindowDeleteHotspot(win, "tab"..tostring(num_tabs))
   num_tabs = num_tabs - 1
   setTab(current_tab)
end

function loadFont(win, reference, font_name, font_size)
   local fonts = utils.getfontfamilies ()
   if not fonts.Dina then
      AddFont(GetInfo (66) .. "\\Dina.fon")
      fonts = utils.getfontfamilies()
   end -- if Dina not installed

   if not fonts[font_name] then
      if fonts["Dina"] then
         font_size = 8
         font_name = "Dina"
      elseif fonts ["Courier New"] then
         font_size = 9
         font_name = "Courier New" -- the actual font
      else
         font_size = 9
         font_name = "Lucida Console"
      end -- if
   end

   check(WindowFont(win, reference, font_name, font_size))
end

function reset_aard()
   font_name = default_font_name
   font_size = default_font_size
   WindowPosition(win, default_x, default_y, 0, 18)
   WindowResize(win, default_width, default_height, TAB_BACKGROUND_COLOUR)
   Repaint() -- hack because WindowPosition doesn't immediately update coordinates
   OnPluginSaveState()
   OnPluginInstall()
end

function OnPluginInstall ()
   win = GetPluginID()

   -- create window with position from movewindow
   windowinfo  = movewindow.install(win, miniwin.pos_top_right, miniwin.create_absolute_location, false, nil, {mouseup=MouseUp, mousedown=LeftClickOnly, dragmove=LeftClickOnly, dragrelease=LeftClickOnly},{x=default_x, y=default_y})
   WindowCreate(win, windowinfo.window_left, windowinfo.window_top, width, height, windowinfo.window_mode, windowinfo.window_flags, TAB_BACKGROUND_COLOUR)

   -- add the resize widget
   WindowAddHotspot(win, "resize", width-SCROLL_BAR_WIDTH, height-SCROLL_BAR_WIDTH, width, height, nil, nil, "MouseDown", nil, nil, "", 6, 0)
   WindowDragHandler(win, "resize", "ResizeMoveCallback", "ResizeReleaseCallback", 0)

   WindowShow(win, true)

   init()
   setupDisplay()
   OnPluginEnable()
end

function trStart()
   local tr_left = 1
   local tr_top = TITLE_HEIGHT
   if num_tabs > 1 then
      tr_top = tr_top + TITLE_HEIGHT
   end
   return tr_left, tr_top
end

function trShape()
   local tr_width = width - SCROLL_BAR_WIDTH - 1
   local tr_height = height - TITLE_HEIGHT - 1
   if num_tabs > 1 then
      tr_height = tr_height - TITLE_HEIGHT
   end
   return tr_width, tr_height
end

function init ()
   win_head_font = "fonthead"..win

   loadFont(win, win_head_font, head_font_name, head_font_size)

   header_font_height = WindowFontInfo(win, win_head_font, 1) - WindowFontInfo(win, win_head_font, 4) + 1
   TITLE_HEIGHT = math.floor(header_font_height*1.8)

   -- add the drag handler so they can move the window around
   movewindow.add_drag_handler(win, 0, 0, 0, TITLE_HEIGHT)

   -- register with the z-order monitor
   CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)

   font_name = GetVariable("font_name")
   font_size = tonumber(GetVariable("font_size"))

   tabs_rects = {}
   tabs_scrollbars = {}
end

function drawTabs (mouseover)
   local tab_left = 5
   local tab_padding = 30
   local active_left = nil
   local active_width = nil
   WindowRectOp(win, miniwin.rect_fill, 1, TITLE_HEIGHT, width-2, 2*TITLE_HEIGHT, TAB_BACKGROUND_COLOUR)

   for i,_ in ipairs(tabs_captures) do
      local name = tostring(i)
      local tab_width = WindowTextWidth(win, win_head_font, name) + (tab_padding * 2)

      if not WindowHotspotInfo(win, "tab"..tostring(i), 1) then
         WindowAddHotspot(win, "tab"..tostring(i), tab_left, TITLE_HEIGHT + 2, tab_left + tab_width, TITLE_HEIGHT * 3, "tabMouseOver", "tabCancelMouseOver", "tabMouseDown", nil, nil, "", 1, 0)
      end

      if i == current_tab then
         active_left = tab_left
         active_width = tab_width
      else
         local lcolor = WINDOW_BORDER_COLOUR
         local bcolor = 0x444444
         if i ~= mouseover then
            lcolor = 0x444444
            if tabs_activity[i] then
               bcolor = 0x00008b
            else
               bcolor = TAB_BACKGROUND_COLOUR
            end
         end

         WindowCircleOp(
            win, miniwin.circle_round_rectangle,
            tab_left, TITLE_HEIGHT + 2, tab_left + tab_width, TITLE_HEIGHT * 3, -- coords
            lcolor, miniwin.pen_solid, 1,          -- pen
            bcolor, miniwin.brush_solid,  -- brush
            16,   -- width of the ellipse used to draw the rounded corner
            TITLE_HEIGHT*2   -- height of the ellipse used to draw the rounded corner
         )
      end

      tab_left = tab_left + tab_padding
      tab_left = tab_left + WindowText(win, win_head_font, name, tab_left, TITLE_HEIGHT + 4, width, TITLE_HEIGHT * 2, 0xEEEEEE, false)
      tab_left = tab_left + tab_padding
   end

   WindowLine(win, 0, (TITLE_HEIGHT * 2) - 1, width, (TITLE_HEIGHT * 2) - 1, WINDOW_BORDER_COLOUR, 0 + 0x0200, 1)
   WindowCircleOp(
      win, miniwin.circle_round_rectangle,
      active_left, TITLE_HEIGHT + 2, active_left + active_width, TITLE_HEIGHT * 3, -- coords
      WINDOW_BORDER_COLOUR, miniwin.pen_solid, 1,          -- pen
      WINDOW_BACKGROUND_COLOUR, miniwin.brush_solid,  -- brush
      16,   -- width of the ellipse used to draw the rounded corner
      TITLE_HEIGHT*2   -- height of the ellipse used to draw the rounded corner
   )
   WindowText(win, win_head_font, tostring(current_tab), active_left + tab_padding, TITLE_HEIGHT + 4, width, TITLE_HEIGHT * 2, 0xEEEEEE, false)

   tabs_rects[current_tab]:draw()
   tabs_scrollbars[current_tab]:draw()
end

function tabMouseOver (flags, hotspot_id)
   drawTabs(tonumber(hotspot_id:sub(4)))
end

function tabCancelMouseOver (flags, hotspot_id)
   drawTabs()
end

function tabMouseDown (flags, hotspot_id)
   setTab(tonumber(hotspot_id:sub(4)))
end

function drawBackground ()
   -- draw the title bar
   header_width = WindowTextWidth(win, win_head_font, "Communication Log")
   WindowGradient(win, 1, 0, width, TITLE_HEIGHT, WINDOW_BACKGROUND_COLOUR, 0x444444, 2)
   WindowText(win, win_head_font, "Communication Log", (width-header_width)/2, ((TITLE_HEIGHT-header_font_height)/2)-1, width, TITLE_HEIGHT, 0xEEEEEE, false)
   WindowLine(win, 0, TITLE_HEIGHT-1, width, TITLE_HEIGHT-1, WINDOW_BORDER_COLOUR, 0 + 0x0200, 1)

   drawResizer()

   -- draw border
   WindowRectOp(win, 1, 0, 0, 0, 0, WINDOW_BORDER_COLOUR)
end

function drawResizer ()
   -- draw the resize widget
   WindowRectOp(win, 2, width-SCROLL_BAR_WIDTH, height-SCROLL_BAR_WIDTH, 0, 0, SCROLL_BACKGROUND_COLOUR)
   WindowLine(win, width-SCROLL_BAR_WIDTH+1, height-2, width-1, height-SCROLL_BAR_WIDTH, 0xffffff, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+2, height-2, width-1, height-SCROLL_BAR_WIDTH+1, 0x696969, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+4, height-2, width-1, height-SCROLL_BAR_WIDTH+3, 0xffffff, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+5, height-2, width-1, height-SCROLL_BAR_WIDTH+4, 0x696969, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+7, height-2, width-1, height-SCROLL_BAR_WIDTH+6, 0xffffff, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+8, height-2, width-1, height-SCROLL_BAR_WIDTH+7, 0x696969, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+10, height-2, width-1, height-SCROLL_BAR_WIDTH+9, 0xffffff, 0, 1)
   WindowLine(win, width-SCROLL_BAR_WIDTH+11, height-2, width-1, height-SCROLL_BAR_WIDTH+10, 0x696969, 0, 1)
end

function ResizeMoveCallback ()
   if GetPluginVariable("c293f9e7f04dde889f65cb90", "lock_down_miniwindows") == "1" then
      return
   end
   posx, posy = WindowInfo(win, 17), WindowInfo(win, 18)
   width = width+posx-startx
   startx = posx
   if (WindowTextWidth(win, win_head_font, "WWWCOMMUNICATION")+2*SCROLL_BAR_WIDTH > width) then
      width = WindowTextWidth(win, win_head_font, "WWWCOMMUNICATION")+2*SCROLL_BAR_WIDTH
      startx = windowinfo.window_left+width
   elseif (windowinfo.window_left+width > GetInfo(281)) then
      width = GetInfo(281)-windowinfo.window_left
      startx = GetInfo(281)
   end
   height = height+posy-starty
   starty=posy
   if (3*SCROLL_BAR_WIDTH+3*TITLE_HEIGHT > height) then
      height = 3*SCROLL_BAR_WIDTH+3*TITLE_HEIGHT
      starty = windowinfo.window_top+height
   elseif (windowinfo.window_top+height > GetInfo(280)) then
      height = GetInfo(280)-windowinfo.window_top
      starty = GetInfo(280)
   end
   if (utils.timer() - lastRefresh > 0.0333) then
      setupDisplay()
      lastRefresh = utils.timer()
   end
end

lastRefresh = 0

function ResizeReleaseCallback ()
   setupDisplay()
   for i = 1,num_tabs do
      tabs_rects[i]:reWrapLines()
   end
   WindowMoveHotspot(win, "resize", width-SCROLL_BAR_WIDTH, height-SCROLL_BAR_WIDTH, width, 0)
end

function setupDisplay ()
   WindowResize(win, width, height, WINDOW_BACKGROUND_COLOUR)
   drawBackground()
   tr_left, tr_top = trStart()
   tr_width, tr_height = trShape()
   for i = 1,num_tabs do
      if tabs_rects[i] then
         tabs_rects[i]:setRect(tr_left, tr_top, tr_width, tr_height)
         tabs_scrollbars[i]:setRect(tr_left + tr_width, tr_top, SCROLL_BAR_WIDTH, height-tr_top-SCROLL_BAR_WIDTH)
      else
         makeRect(i, tr_left, tr_top, tr_width, tr_height)
      end
   end
   drawTabs()
end

function OnPluginConnect ()
   -- first time after connect, get tags right
end --  OnPluginConnect

function OnPluginClose ()
   -- if enabled
   if GetPluginInfo(GetPluginID(), 17) then
      OnPluginDisable()
   end -- if enabled
   WindowDelete(win)
end -- OnPluginClose

function OnPluginEnable ()
   WindowShow(win, true)
   -- if we are connected when the plugin loads, it must have been reloaded while playing
   if IsConnected() then
      OnPluginConnect()
   end -- if already connected
   OnPluginSaveState()
end -- OnPluginEnable

function OnPluginDisable()
   WindowShow( win, false )
   OnPluginSaveState()
end --  OnPluginDisable

require "serialize"
function OnPluginSaveState()
   movewindow.save_state(win)

   SetVariable("font_name", font_name)
   SetVariable("font_size", font_size)
   SetVariable("date_format", date_format)
   if WindowInfo(win, 3) and WindowInfo(win, 4) then
      width = WindowInfo(win, 3)
      height = WindowInfo(win, 4)
   end
   SetVariable("WINDOW_WIDTH", width)
   SetVariable("WINDOW_HEIGHT", height)
   SetVariable("info_on", info_on)
   SetVariable("global_quest_on", global_quest_on)
   SetVariable("remort_auction_on", remort_auction_on)
   SetVariable("warfare_on", warfare_on)
   SetVariable("log_to_file", log_to_file)
   SetVariable("log_colour_codes", log_colour_codes)
   SetVariable("log_timestamps", log_timestamps)
   SetVariable("show_donations", show_donations)
   SetVariable("channels_table", serialize.save("channels_table"))
   SetVariable("tabs_captures", serialize.save("tabs_captures"))
end

function sanitize_filename(str)
   str = string.gsub(str, "[^%w%s()_-]", "")
   return Trim(str)
end

function stampAndLog(styles)
   local text = ""
   local log_text = ""

   -- remove most control characters, but preserve newlines
   for i,v in ipairs(styles) do
      v.text = v.text:gsub("[^%g%s\n]","")
      v.length = v.text:len()
   end

   timestamp = os.date(date_format)

   if (log_to_file == 1) then
      text = StylesToColours(styles)

      if (log_timestamps == 1) then
         log_text = "@w"..timestamp..text
      else
         log_text = text
      end
      if (log_colour_codes == 0) then
         log_text = strip_colours(log_text)
      end
      local filename = GetInfo(58):gsub("^.\\",GetInfo(56))..sanitize_filename(GetInfo(2)).."ChatLog.txt"
      local f, err = io.open (filename, "a+") -- handle to chat log file
      if f then
         f:write(log_text.."\n") -- write to it
         f:close()  -- close that file now
      else
         ColourNote("white", "red", "COMMUNICATION LOG ERROR: Failed to access your logging file because of the following reason:" )
         ColourNote("white", "red", err)
         ColourNote("white", "red", "Fix the problem or disable Logging to File in the Communication Log plugin.")
      end
   end

   if timestamp ~= "" then
      table.insert(styles,1,{text=timestamp, length=string.len(timestamp), textcolour=0xc0c0c0})
   end
end

function stampAndStore(styles, chan)
   stampAndLog(styles)
   store(styles, chan)
end

-- Takes input as a string with embedded Aardwolf color codes. Use via CallPlugin().
-- See:   http://mushclient.com/scripts/doc.php?function=CallPlugin
-- You can use the function StylesToColours(styles_table) from aardwolf_colors.lua
-- or manually embed your own colors to push any colorized line you want to the log window.
-- Example: CallPlugin("b555825a4a5700c35fa80780","storeFromOutside","HELLO@RHello@Mhello@x215hello@x66HELLO")
function storeFromOutside(msg)
   if storeTab(ColoursToStyles(msg), 1) then
      drawTabs()
   end
end

-- stolen from Mendaloth
function rsocial (name, line, wildcards, styles)
	-- Remote socials will always start with a dark cyan or bright magenta *
	-- Checking color cuts down on non-socials ending up in the chat log...
	if (styles[1].textcolour == GetNormalColour(7) or styles[1].textcolour == GetBoldColour(6)) then
		stampAndStore(filter_as_needed(styles), "remote_social")
	end
end

function untagged_info (name, line, wildcards, styles)
   local result = filter_as_needed(styles)
   if result then
      stampAndStore(result, name)
   end
end -- untagged info

function filter_as_needed(msg)
   if GetPluginInfo("48f867c18f6ff1d6d3b52918", 17) then -- if using the #sub plugin
      if type(msg) == "table" then
         msg = StylesToColours(msg)
      end
      rc, msg = CallPlugin("48f867c18f6ff1d6d3b52918", "filter_string", msg)
   end
   if type(msg) == "string" then
      return ColoursToStyles(msg)
   else
      return msg
   end
end

function storeTab(styles, tab)
   tabs_rects[tab]:addStyles(styles)
   if tab == current_tab then
      tabs_rects[tab]:draw()
   else
      if not tabs_activity[tab] then
         tabs_activity[tab] = true
         return true
      end
   end
   return false
end

function store(styles, chan)
   will_draw = false
   for tab,channels in ipairs(tabs_captures) do
      if not channels[chan] then
         addNewChannel(chan)
      end
      if channels[chan]["capture"] then
         if storeTab(styles, tab) then
            will_draw = true
         end
      end
   end
   if will_draw then
      drawTabs()
   end
end

function OnPluginBroadcast (msg, id, name, text)
   -- Look for GMCP handler.
   if (id == '3e7dedbe37e44942dd46d264') then
      if (text == "comm.channel") then
         gmcpcomm = gmcp("comm.channel")
         msg = gmcpcomm.msg or ""
         chan = gmcpcomm.chan or ""
         if (show_donations == 1 or string.match(strip_colours(msg), "^CLAN ANNOUNCEMENT: %a+ has donated") == nil) then
            if (not channels_table[chan]) or channels_table[chan]["capture"] then
               local styles = filter_as_needed(msg)
               if styles then
                  stampAndStore(styles, chan)
               end
            end
         end
      end
   elseif (id == "462b665ecb569efbf261422f" and msg==996 and text == "re-register z") then
      CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", win)
   end
end

function MouseDown(flags, hotspot_id)
   if (hotspot_id == "resize") then
      startx, starty = WindowInfo (win, 17), WindowInfo (win, 18)
   end
end


function chat_show (name, line, wildcards)
   WindowShow( win, true )
   ColourNote ("yellow", "", "Chats window now shown. Type 'chats hide' to hide it.")
end -- function chat_show

function chat_hide (name, line, wildcards)
   WindowShow( win, false )
   ColourNote ("yellow", "", "Chats window now hidden. Type 'chats show' to see it again.")
end -- function chat_hide

require "pairsbykeys"

function extend_rightclick_menu_result(sender, hotspot_id, result)
   if result == 1 then
      wanted_font = utils.fontpicker(font_name, font_size) --font dialog
      if wanted_font then
         font_name = wanted_font.name
         font_size = wanted_font.size
         SetVariable("font_name", font_name)
         SetVariable("font_size", font_size)
         for i = 1,num_tabs do
            local tri = tabs_rects[i]
            tri:loadFont(font_name, font_size)
            tri:reWrapLines()
         end
      end
   elseif result == 2 then
      date_format = ""
      ColourNote ("yellow", "", "Timestamps in communication window DISABLED.")
   elseif result == 3 then
      date_format = "[%d %b %H:%M:%S] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 13:29:49'.")
   elseif result == 4 then
      date_format = "[%d %b %I:%M:%S%p] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '30 Aug 01:20:12PM'.")
   elseif result == 5 then
      date_format = "[%H:%M:%S] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '13:29:08'.")
   elseif result == 6 then
      date_format = "[%I:%M:%S%p] "
      ColourNote ("yellow", "", "Timestamps in communication window ENABLED using format like '1:22:06 PM'.")
   elseif result == 7 then
      log_to_file = (((0 == log_to_file) and 1) or 0)
      SetVariable("log_to_file", log_to_file)
      if log_to_file == 0 then
         ColourNote ("yellow", "", "Logging to file is now DISABLED.")
      else
         ColourNote ("yellow", "", "Logging to file is now ENABLED.")
      end
   elseif result == 8 then
      log_colour_codes = (((0 == log_colour_codes) and 1) or 0)
      SetVariable("log_colour_codes", log_colour_codes)
      if log_colour_codes == 0 then
         ColourNote ("yellow", "", "Color codes will be stripped from the log file.")
      else
         ColourNote ("yellow", "", "Color codes will be included in the log file.")
      end
   elseif result == 9 then
      log_timestamps = (((0 == log_timestamps) and 1) or 0)
      SetVariable("log_timestamps", log_timestamps)
      if log_timestamps == 0 then
         ColourNote ("yellow", "", "Timestamps will not be included in the log file.")
      else
         ColourNote ("yellow", "", "Timestamps will be included in the log file.")
      end
   end

   local echo_skip = 0
   if (IsPluginInstalled("55616ea13339bc68e963e1f8")) then
      echo_skip = 8
      if result == 10 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "on")
      elseif result == 11 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "off")
      elseif result == 12 then
         CallPlugin("55616ea13339bc68e963e1f8", "chat_echo", "custom")
      elseif result == 13 then
         CallPlugin("55616ea13339bc68e963e1f8", "hideEchos", info_echo, nil, nil, nil, nil)
      elseif result == 14 then
         CallPlugin("55616ea13339bc68e963e1f8", "hideEchos", nil, global_quest_echo, nil, nil, nil)
      elseif result == 15 then
         CallPlugin("55616ea13339bc68e963e1f8", "hideEchos", nil, nil, remort_auction_echo, nil, nil)
      elseif result == 16 then
         CallPlugin("55616ea13339bc68e963e1f8", "hideEchos", nil, nil, nil, donations_echo, nil)
      elseif result == 17 then
         CallPlugin("55616ea13339bc68e963e1f8", "hideEchos", nil, nil, nil, nil, warfare_echo)
      end
   end

   noremove = (num_tabs < 2) and 1 or 0

   if result == 10+echo_skip then
      addTab()
   elseif result == 11+echo_skip-noremove then
      removeTab()
   elseif result == 12+echo_skip-noremove then
      local tbl = {}
      local defaults = {}
      local i = 1
      for k,v in pairsByKeys(tabs_captures[current_tab]) do
         tbl[i] = k
         defaults[i] = v["capture"]
         i = i+1
      end
      local capture_result = utils.multilistbox ("Choose which channels to capture to this communication log tab.", "Communication Log Channel Selection", tbl, defaults)
      if capture_result and next(capture_result) then -- cancel if the list is empty
         for i,v in ipairs(tbl) do
            tabs_captures[current_tab][v]["capture"] = capture_result[i]
         end
      end
   elseif result == 13+echo_skip-noremove then
      if info_on == 0 then
         ColourNote ("yellow", "", "INFO capturing is now ENABLED.")
      else
         ColourNote ("yellow", "", "INFO capturing is now DISABLED.")
      end
      EnableTrigger("info", 0 == info_on)
      EnableTrigger("raidinfo", 0 == info_on)
      EnableTrigger("claninfo", 0 == info_on)
      info_on = GetTriggerOption("info","enabled")
   elseif result == 14+echo_skip-noremove then
      if global_quest_on == 0 then
         ColourNote ("yellow", "", "Global Quest capturing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Global Quest capturing is now DISABLED.")
      end
      EnableTrigger("global_quest", 0 == global_quest_on)
      global_quest_on = GetTriggerOption("global_quest","enabled")
   elseif result == 15+echo_skip-noremove then
      if remort_auction_on == 0 then
         ColourNote ("yellow", "", "Remort Auction capturing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Remort Auction capturing is now DISABLED.")
      end
      EnableTrigger("remort_auction", 0 == remort_auction_on)
      remort_auction_on = GetTriggerOption("remort_auction","enabled")
   elseif result == 16+echo_skip-noremove then
      if show_donations == 0 then
         ColourNote ("yellow", "", "Clan donation capturing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Clan donation capturing is now DISABLED.")
      end
      show_donations = (((0 == show_donations) and 1) or 0)
      SetVariable("show_donations", show_donations)
   elseif result == 17+echo_skip-noremove then
      if warfare_on == 0 then
         ColourNote ("yellow", "", "Warfare capturing is now ENABLED.")
      else
         ColourNote ("yellow", "", "Warfare capturing is now DISABLED.")
      end
      EnableTrigger("warfare", 0 == warfare_on)
      warfare_on = GetTriggerOption("warfare","enabled")
   elseif result == 18+echo_skip-noremove then
      tabs_rects[current_tab]:clear()
   elseif result == 19+echo_skip-noremove then
      CallPlugin("462b665ecb569efbf261422f","boostMe", win)
   elseif result == 20+echo_skip-noremove then
      CallPlugin("462b665ecb569efbf261422f","dropMe", win)
   end
   OnPluginSaveState()
end

function extend_rightclick_menu_string(tr)
   local function check(t, i)
      t[i] = "+"..t[i]
   end

   local function disable(t, i)
      t[i] = "^"..t[i]
   end

   local menu_strings = {
      "Configure Font",
      ">Timestamp",
      "No Timestamps",
      "30 Aug 13:29:49",
      "30 Aug 01:20:12PM",
      "13:29:08",
      "1:22:06 PM",
      "<",
      ">Logging to File",
      log_to_file==1 and "Disable" or "Enable",
      "Log with Color Codes",
      "Log with Timestamps",
      "<",
      "-",
      "Add New Tab",
      "Remove This Tab",
      "-",
      ">Tab Capture Settings",
      "Customize Channels",
      ">Capture Other Info",
      "INFO:",
      "Global Quest:",
      "Remort Auction:",
      "Clan Donations",
      "WARFARE:",
      "<",
      "<",
      "Clear Tab",
      "-",
      "Bring to Front",
      "Send to Back"
   }
   local ms = menu_strings

   if date_format == "" then check(ms, 3) end
   if date_format == "[%d %b %H:%M:%S] " then check(ms, 4) end
   if date_format == "[%d %b %I:%M:%S%p] " then check(ms, 5) end
   if date_format == "[%H:%M:%S] " then check(ms, 6) end
   if date_format == "[%I:%M:%S%p] " then check(ms, 7) end

   if log_colour_codes == 1 then check(ms, 11) end
   if log_timestamps == 1 then check(ms, 12) end

   if num_tabs < 2 then disable(ms, 16) end

   if info_on == 1 then check(ms, 21) end
   if global_quest_on == 1 then check(ms, 22) end
   if remort_auction_on == 1 then check(ms, 23) end
   if show_donations == 1 then check(ms, 24) end
   if warfare_on == 1 then check(ms, 25) end

   if (IsPluginInstalled("55616ea13339bc68e963e1f8")) then
      local echo_menu_strings = {
         ">Echo Channels In Main Window",
         "Echo All",
         "Echo None",
         "Custom Echo List",
         "-",
         ">Echo Other Info",
         "INFO:",
         "Global Quest:",
         "Remort Auction:",
         "Clan Donations",
         "WARFARE:",
         "<",
         "<"
      }
      local ems = echo_menu_strings

      err,info_echo,global_quest_echo,remort_auction_echo,donations_echo,warfare_echo = CallPlugin("55616ea13339bc68e963e1f8", "getEchos")
      if info_echo then check(ems, 7) end
      if global_quest_echo then check(ems, 8) end
      if remort_auction_echo then check(ems, 9) end
      if donations_echo then check(ems, 10) end
      if warfare_echo then check(ems, 11) end

      for i,v in ipairs(echo_menu_strings) do
         table.insert(menu_strings, 13+i, v)
      end

      return table.concat(menu_strings, "|")
   end
end

function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
 end

]]>
</script>
</muclient>
