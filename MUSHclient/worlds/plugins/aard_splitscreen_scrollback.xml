<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Splitscreen_Scrollback"
   author="Fiendish"
   id="74524d1272786aaf04e9487d"
   language="Lua"
   purpose="Split-screen view of the main output when backscrolling"
   date_written="2019-04-07 23:05:53"
   requires="5.05"
   version="1.0"
   sequence="10000"
   >

</plugin>

<script>
<![CDATA[

require "mw_theme_base"
require "text_rect"

function at_bottom()
   cur_scroll_position = GetInfo(296)
   total_output_lines = GetInfo(224)
   text_rectangle_height = GetInfo(293) - GetInfo(291)
   text_rectangle_lines = text_rectangle_height / font_height
   max_scroll_line = total_output_lines - text_rectangle_lines - 1
   max_scroll_position = (max_scroll_line * font_height)
   return cur_scroll_position >= max_scroll_position  -- the current position can briefly be higher than max when the output is scrolling quickly
end

win = GetPluginID()

function OnPluginEnable()
   WindowCreate(win, 0, 0, 0, 0, 0, miniwin.create_absolute_location + miniwin.create_keep_hotspots, 0)
   WindowAddHotspot(win, 'bar', 0, 0, 0, 0, "", "", "BarDown", "", "", "", miniwin.cursor_ns_arrow, 0)
   WindowDragHandler(win, 'bar', "BarDrag", "BarDragRelease")
   WindowScrollwheelHandler(win, 'bar', 'ScrollMain')
   WindowFont(win, "body", GetAlphaOption("output_font_name"), GetOption("output_font_height"), false, false, false)
   WindowShow(win, false)
   check_display()
end

function OnPluginInstall()
   OnPluginEnable()
end

function OnPluginCommandEntered(sText)
   if rect then
      go_back = GetInfo(296)
   end
   return sText
end

function OnPluginScreendraw(type, log, line)
   if rect then
      new_num_lines = GetLinesInBufferCount()
      for i=num_lines,new_num_lines do
         rect:addStyles(GetStyleInfo(i))
      end
      rect:draw()
      num_lines = new_num_lines+1
   end
end

function OnPluginDrawOutputWindow(a, b, c)
   if cur_scroll_position == GetInfo(296) then
      return
   end
   check_display()
end

base_desired_lines = 17
new_desired_lines = 0

function is_rect()
   return (GetInfo(272) ~= 0) or (GetInfo(273) ~= 0) or (GetInfo(274) ~= 0) or (GetInfo(275) ~= 0)
end

function check_display()
   font_height = GetInfo(212)
   if at_bottom() then
      if go_back then
         SetScroll(go_back)
         go_back = nil
      else
         WindowShow(win, false)
         if rect then
            rect:unInit()
            rect = nil
         end
      end
   else
      desired_lines = base_desired_lines + new_desired_lines
      desired_lines = math.min(desired_lines, text_rectangle_lines-10)
      desired_lines = math.max(desired_lines, 10)
   
      if text_rectangle_lines > (desired_lines+2) then
         local border_offset = 0
         local border_width = 0
         if is_rect() then
            border_offset = GetInfo(276)
            border_width = GetInfo(277)
         else
           border_offset = GetOption("pixel_offset")
         end
         local left = GetInfo(290) - border_offset - border_width
         local right = GetInfo(292) + border_offset + border_width
         local bottom = GetInfo(293) + border_offset + border_width
         local width = right - left
         local height = (font_height*desired_lines) + (4*border_offset) - Theme.TITLE_PADDING - 1
         local top = bottom - height
         if (
            (not WindowInfo(win, 5))
            or (WindowInfo(win, 1) ~= left)
            or (WindowInfo(win, 2) ~= top)
            or (WindowInfo(win, 3) ~= width)
            or (WindowInfo(win, 4) ~= height)
         ) then -- build the window if it isn't where we want it to be
            WindowPosition(win, left, top, 0, miniwin.create_absolute_location + miniwin.create_keep_hotspots)
            WindowResize(win, width, height, Theme.SECONDARY_BODY)
            local l , t, r, b = Theme.DrawBorder(win)
            t = Theme.DrawTitleBar(win, "body", "-- RECENT --")
            if rect then
               rect:unInit()
            end
            rect = TextRect.new(win, "rect", l, t+1, r+1, b, desired_lines, false, Theme.PRIMARY_BODY, border_offset, GetAlphaOption("output_font_name"), GetOption("output_font_height"), 'ScrollMain')
            num_lines = GetLinesInBufferCount()
            for i=math.min(num_lines-1, rect.rect_lines),1,-1 do
               rect:addStyles(GetStyleInfo(num_lines - i))
            end
            rect:draw()
            WindowShow(win, true)
            WindowMoveHotspot(win, 'bar', 0, 0, 0, t)
            CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
         end
      end
   end
end

function BarDown(flags, hotspot_id)
   starty = WindowInfo(win, 18)
end

function BarDrag(flags, hotspot_id)
   local prev_new_desired_lines = new_desired_lines
   local posy = WindowInfo(win, 18)
   new_desired_lines, _ = math.modf((starty - posy) / font_height)
   if new_desired_lines ~= prev_new_desired_lines then
      check_display()
   end
end

function BarDragRelease(flags, hotspot_id)
   base_desired_lines = desired_lines
   new_desired_lines = 0
   check_display()
end

function OnPluginClose()
   OnPluginDisable()
end

function OnPluginDisable()
   if rect then
      rect:unInit()
      rect = nil
   end
   WindowDelete(win)
end

function ScrollMain(flags, hotspot_id)
   if bit.band (flags, 0x100) ~= 0 then
      how_much = font_height
      -- wheel scrolled down
   else
      how_much = -font_height
      -- wheel scrolled up
   end
   SetScroll(GetInfo(296) + 5*how_much, GetInfo(120))
end

]]>
</script>
</muclient>
