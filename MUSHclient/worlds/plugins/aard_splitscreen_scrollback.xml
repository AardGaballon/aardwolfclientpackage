<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Splitscreen_Scrollback"
   author="Fiendish"
   id="74524d1272786aaf04e9487d"
   language="Lua"
   purpose="Split-screen view of the main output when backscrolling"
   date_written="2019-04-07 23:05:53"
   requires="5.05"
   version="1.0"
   sequence="10000"
   >

</plugin>

<script>
<![CDATA[

require "mw_theme_base"
require "text_rect"

function at_bottom()
   cur_scroll_position = GetInfo(296)
   total_output_lines = GetInfo(224)
   text_rectangle_height = GetInfo(293) - GetInfo(291)
   font_height = GetInfo(212)
   max_scroll_position = ((total_output_lines-1) * font_height) - text_rectangle_height

   return cur_scroll_position >= max_scroll_position  -- the current position can briefly be higher than max when the output is scrolling quickly. Why, I don't know.
end

win = GetPluginID()

function LoadTitleFont()
   title_font = GetAlphaOption("output_font_name")
   title_font_size = GetOption("output_font_height")
   WindowFont(win, "title", GetAlphaOption("output_font_name"), GetOption("output_font_height"), false, false, false)
   title_height = WindowFontInfo(win, "title", 1) + (2 * Theme.TITLE_PADDING)
end

function OnPluginEnable()
   WindowCreate(win, 0, 0, 0, 0, 0, miniwin.create_absolute_location + miniwin.create_keep_hotspots, 0)
   WindowAddHotspot(win, 'bar', 0, 0, 0, 0, "", "", "BarDown", "", "", "", miniwin.cursor_ns_arrow, 0)
   WindowDragHandler(win, 'bar', "BarDrag", "BarDragRelease")
   WindowScrollwheelHandler(win, 'bar', 'ScrollMain')
   LoadTitleFont()
   WindowShow(win, false)
   check_display()
end

function OnPluginInstall()
   OnPluginEnable()
end

-- when something is added to output
function OnPluginScreendraw(type, log, line)
   if rect then
      new_num_lines = GetLinesInBufferCount()
      for i=num_lines,new_num_lines do
         rect:addStyles(GetStyleInfo(i))
      end
      rect:draw()
      num_lines = new_num_lines+1
   end
end

-- when output area moves
function OnPluginDrawOutputWindow(a, b, c)
   if cur_scroll_position == GetInfo(296) then  -- current position same as previous
      return
   end
   check_display()
end

base_desired_lines = 17
new_desired_lines = 0

function is_rect()
   return (GetInfo(272) ~= 0) or (GetInfo(273) ~= 0) or (GetInfo(274) ~= 0) or (GetInfo(275) ~= 0)
end

function check_display()
   if at_bottom() then
      WindowShow(win, false)
      if rect then
         rect:unInit()
         rect = nil
      end
      SetOption("unpause_on_send", original_unpause_on_send)
   else
      local text_rectangle_lines = text_rectangle_height / font_height
      desired_lines = math.max(
         10,
         math.min(
            base_desired_lines + new_desired_lines,
            text_rectangle_lines - 10
         )
      )
      if text_rectangle_lines > (desired_lines+2) then
         desired_lines = math.floor(desired_lines)  -- round here because text_rectangle_lines isn't an int
         local text_offset = GetOption("pixel_offset")
         local border_width = GetInfo(277)
         local border_offset = GetInfo(276)
         local bgcolor = Theme.PRIMARY_BODY
         if not is_rect() then
            border_width = 1
            border_offset = 0
            bgcolor = GetNormalColour(1)
         end
         local left = GetInfo(290) - border_offset - border_width
         local right = GetInfo(292) + border_offset + border_width
         local bottom = GetInfo(293) + border_offset + border_width
         local width = right - left
         local output_font = GetAlphaOption("output_font_name")
         local output_font_size = GetOption("output_font_height")
         if (output_font ~= title_font) or (output_font_size ~= title_font_size) then
            LoadTitleFont()
         end
         local height = (font_height * desired_lines) + border_offset + (2*border_width) + text_offset + title_height
         local top = bottom - height
         if (
            (not WindowInfo(win, 5))
            or (WindowInfo(win, 1) ~= left)
            or (WindowInfo(win, 2) ~= top)
            or (WindowInfo(win, 3) ~= width)
            or (WindowInfo(win, 4) ~= height)
            or (
               rect and (
                  (output_font ~= rect.font_name)
                  or (output_font_size ~= rect.font_size)
               )
            )
         ) then -- build the window if it isn't where we want it to be
            WindowPosition(win, left, top, 0, miniwin.create_absolute_location + miniwin.create_keep_hotspots)
            WindowResize(win, width, height, bgcolor)
            WindowRectOp(win, miniwin.rect_fill, 0, 0, 0, 0, bgcolor, nil)  -- clear
            local l, t, r, b = Theme.DrawBorder(win)
            t = Theme.DrawTitleBar(win, "title", "-- RECENT --")
            if rect then
               rect:unInit()
            end
            rect = TextRect.new(
               win, "rect",
               l + text_offset + border_offset - border_width,
               t + border_width,
               r - text_offset - border_offset + border_width,
               b - text_offset - border_offset + border_width,
               desired_lines, false, bgcolor, 0,
               output_font, output_font_size,  -- output_font_height is actually the pt size
               'ScrollMain'
            )
            num_lines = GetLinesInBufferCount()
            for i=math.min(num_lines-1, rect.rect_lines),1,-1 do
               rect:addStyles(GetStyleInfo(num_lines - i))
            end
            rect:draw()
            WindowMoveHotspot(win, 'bar', 0, 0, 0, t)
            WindowShow(win, true)
            CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
            original_unpause_on_send = GetOption("unpause_on_send")
            original_auto_pause = GetOption("auto_pause")
            SetOption("auto_pause", 1)
            SetOption("unpause_on_send", 0)
         end
      end
   end
end

function BarDown(flags, hotspot_id)
   starty = WindowInfo(win, 18)
end

function BarDrag(flags, hotspot_id)
   local prev_new_desired_lines = new_desired_lines
   local posy = WindowInfo(win, 18)
   new_desired_lines, _ = math.modf((starty - posy) / font_height)
   if new_desired_lines ~= prev_new_desired_lines then
      check_display()
   end
end

function BarDragRelease(flags, hotspot_id)
   base_desired_lines = desired_lines
   new_desired_lines = 0
   check_display()
end

function OnPluginClose()
   OnPluginDisable()
end

function OnPluginDisable()
   if rect then
      rect:unInit()
      rect = nil
   end
   WindowDelete(win)
   SetOption("auto_pause", original_auto_pause)
end

function ScrollMain(flags, hotspot_id)
   local delta = math.ceil(bit.shr(flags, 16) / 3)
   if bit.band (flags, miniwin.wheel_scroll_back) ~= 0 then
      direction = 1   -- wheel scrolled down
   else
      direction = -1  -- wheel scrolled up
   end
   SetScroll(GetInfo(296) + delta*direction, GetInfo(120))
end

]]>
</script>
</muclient>
